// Generated by CIRCT firtool-1.62.0
module ChaChaShiftRegister(
  input         clock,
                reset,
  input  [31:0] io_inputs_0,
                io_inputs_1,
                io_inputs_2,
                io_inputs_3,
                io_inputs_4,
                io_inputs_5,
                io_inputs_6,
                io_inputs_7,
                io_inputs_8,
                io_inputs_9,
                io_inputs_10,
                io_inputs_11,
                io_inputs_12,
                io_inputs_13,
                io_inputs_14,
                io_inputs_15,
  input         io_load,
                io_shift_right,
  output [31:0] io_output,
  output        io_empty
);

  reg [31:0] shiftRegister_0;
  reg [31:0] shiftRegister_1;
  reg [31:0] shiftRegister_2;
  reg [31:0] shiftRegister_3;
  reg [31:0] shiftRegister_4;
  reg [31:0] shiftRegister_5;
  reg [31:0] shiftRegister_6;
  reg [31:0] shiftRegister_7;
  reg [31:0] shiftRegister_8;
  reg [31:0] shiftRegister_9;
  reg [31:0] shiftRegister_10;
  reg [31:0] shiftRegister_11;
  reg [31:0] shiftRegister_12;
  reg [31:0] shiftRegister_13;
  reg [31:0] shiftRegister_14;
  reg [31:0] shiftRegister_15;
  reg [4:0]  count;
  always @(posedge clock) begin
    if (reset) begin
      shiftRegister_0 <= 32'h0;
      shiftRegister_1 <= 32'h0;
      shiftRegister_2 <= 32'h0;
      shiftRegister_3 <= 32'h0;
      shiftRegister_4 <= 32'h0;
      shiftRegister_5 <= 32'h0;
      shiftRegister_6 <= 32'h0;
      shiftRegister_7 <= 32'h0;
      shiftRegister_8 <= 32'h0;
      shiftRegister_9 <= 32'h0;
      shiftRegister_10 <= 32'h0;
      shiftRegister_11 <= 32'h0;
      shiftRegister_12 <= 32'h0;
      shiftRegister_13 <= 32'h0;
      shiftRegister_14 <= 32'h0;
      shiftRegister_15 <= 32'h0;
      count <= 5'h0;
    end
    else if (io_load) begin
      shiftRegister_0 <= io_inputs_0;
      shiftRegister_1 <= io_inputs_1;
      shiftRegister_2 <= io_inputs_2;
      shiftRegister_3 <= io_inputs_3;
      shiftRegister_4 <= io_inputs_4;
      shiftRegister_5 <= io_inputs_5;
      shiftRegister_6 <= io_inputs_6;
      shiftRegister_7 <= io_inputs_7;
      shiftRegister_8 <= io_inputs_8;
      shiftRegister_9 <= io_inputs_9;
      shiftRegister_10 <= io_inputs_10;
      shiftRegister_11 <= io_inputs_11;
      shiftRegister_12 <= io_inputs_12;
      shiftRegister_13 <= io_inputs_13;
      shiftRegister_14 <= io_inputs_14;
      shiftRegister_15 <= io_inputs_15;
      count <= 5'h10;
    end
    else if (io_shift_right & (|count)) begin
      shiftRegister_0 <= shiftRegister_1;
      shiftRegister_1 <= shiftRegister_2;
      shiftRegister_2 <= shiftRegister_3;
      shiftRegister_3 <= shiftRegister_4;
      shiftRegister_4 <= shiftRegister_5;
      shiftRegister_5 <= shiftRegister_6;
      shiftRegister_6 <= shiftRegister_7;
      shiftRegister_7 <= shiftRegister_8;
      shiftRegister_8 <= shiftRegister_9;
      shiftRegister_9 <= shiftRegister_10;
      shiftRegister_10 <= shiftRegister_11;
      shiftRegister_11 <= shiftRegister_12;
      shiftRegister_12 <= shiftRegister_13;
      shiftRegister_13 <= shiftRegister_14;
      shiftRegister_14 <= shiftRegister_15;
      shiftRegister_15 <= 32'h0;
      count <= count - 5'h1;
    end
  end // always @(posedge)
  assign io_output = shiftRegister_0;
  assign io_empty = count == 5'h0;
endmodule

