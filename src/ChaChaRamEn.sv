// Generated by CIRCT firtool-1.62.0
module ChaChaRamEn(
  input         clock,
                reset,
  input  [31:0] io_in_0,
                io_in_1,
                io_in_2,
                io_in_3,
                io_in_4,
                io_in_5,
                io_in_6,
                io_in_7,
                io_in_8,
                io_in_9,
                io_in_10,
                io_in_11,
                io_in_12,
                io_in_13,
                io_in_14,
                io_in_15,
  input         io_en_0,
                io_en_1,
                io_en_2,
                io_en_3,
                io_en_4,
                io_en_5,
                io_en_6,
                io_en_7,
                io_en_8,
                io_en_9,
                io_en_10,
                io_en_11,
                io_en_12,
                io_en_13,
                io_en_14,
                io_en_15,
  output [31:0] io_out_0,
                io_out_1,
                io_out_2,
                io_out_3,
                io_out_4,
                io_out_5,
                io_out_6,
                io_out_7,
                io_out_8,
                io_out_9,
                io_out_10,
                io_out_11,
                io_out_12,
                io_out_13,
                io_out_14,
                io_out_15
);

  reg [31:0] regs_0;
  reg [31:0] regs_1;
  reg [31:0] regs_2;
  reg [31:0] regs_3;
  reg [31:0] regs_4;
  reg [31:0] regs_5;
  reg [31:0] regs_6;
  reg [31:0] regs_7;
  reg [31:0] regs_8;
  reg [31:0] regs_9;
  reg [31:0] regs_10;
  reg [31:0] regs_11;
  reg [31:0] regs_12;
  reg [31:0] regs_13;
  reg [31:0] regs_14;
  reg [31:0] regs_15;
  always @(posedge clock) begin
    if (reset) begin
      regs_0 <= 32'h0;
      regs_1 <= 32'h0;
      regs_2 <= 32'h0;
      regs_3 <= 32'h0;
      regs_4 <= 32'h0;
      regs_5 <= 32'h0;
      regs_6 <= 32'h0;
      regs_7 <= 32'h0;
      regs_8 <= 32'h0;
      regs_9 <= 32'h0;
      regs_10 <= 32'h0;
      regs_11 <= 32'h0;
      regs_12 <= 32'h0;
      regs_13 <= 32'h0;
      regs_14 <= 32'h0;
      regs_15 <= 32'h0;
    end
    else begin
      if (io_en_0)
        regs_0 <= io_in_0;
      if (io_en_1)
        regs_1 <= io_in_1;
      if (io_en_2)
        regs_2 <= io_in_2;
      if (io_en_3)
        regs_3 <= io_in_3;
      if (io_en_4)
        regs_4 <= io_in_4;
      if (io_en_5)
        regs_5 <= io_in_5;
      if (io_en_6)
        regs_6 <= io_in_6;
      if (io_en_7)
        regs_7 <= io_in_7;
      if (io_en_8)
        regs_8 <= io_in_8;
      if (io_en_9)
        regs_9 <= io_in_9;
      if (io_en_10)
        regs_10 <= io_in_10;
      if (io_en_11)
        regs_11 <= io_in_11;
      if (io_en_12)
        regs_12 <= io_in_12;
      if (io_en_13)
        regs_13 <= io_in_13;
      if (io_en_14)
        regs_14 <= io_in_14;
      if (io_en_15)
        regs_15 <= io_in_15;
    end
  end // always @(posedge)
  assign io_out_0 = regs_0;
  assign io_out_1 = regs_1;
  assign io_out_2 = regs_2;
  assign io_out_3 = regs_3;
  assign io_out_4 = regs_4;
  assign io_out_5 = regs_5;
  assign io_out_6 = regs_6;
  assign io_out_7 = regs_7;
  assign io_out_8 = regs_8;
  assign io_out_9 = regs_9;
  assign io_out_10 = regs_10;
  assign io_out_11 = regs_11;
  assign io_out_12 = regs_12;
  assign io_out_13 = regs_13;
  assign io_out_14 = regs_14;
  assign io_out_15 = regs_15;
endmodule

